from collections import deque

def solution(land):
    answer = 0
    n,m = len(land), len(land[0])
    dic = {i:0 for i in range(m+1)}
    visited = [[False]*m for _ in range(n)]
    for i in range(n):
        for j in range(m):
            if not visited[i][j] and land[i][j] == 1:
                cnt, lines = bfs(i,j,land,n,m,visited)
                for line in lines:
                    dic[line] += cnt
    dic = sorted(dic.items(), key= lambda x: -x[1])
    return dic[0][1]

def bfs(i,j,land,n,m,visited):
    q = deque()
    q.append((i,j))
    visited[i][j] = True
    m_cnt = 1
    line = set()
    line.add(j+1)
    while q:
        x,y = q.popleft()
        for dx, dy in [(0,1),(0,-1),(1,0),(-1,0)]:
            n_x = x+dx
            n_y = y+dy
            if 0<=n_x<n and 0<=n_y<m and land[n_x][n_y] == 1:
                if not visited[n_x][n_y]:
                    q.append((n_x,n_y))
                    visited[n_x][n_y] = True
                    m_cnt +=1
                    line.add(n_y+1)
    return m_cnt, line
        
    
