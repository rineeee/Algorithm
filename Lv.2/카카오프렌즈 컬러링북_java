class Solution {
    int[] dx = {-1, 0, 1, 0};
    int[] dy = {0, 1, 0, -1};
    int count  = 0;
    
    public int[] solution(int m, int n, int[][] picture) {
        int numberOfArea = 0;
        int maxSizeOfOneArea = 0;
        int[] answer = new int[2];
        
        boolean[][] visited = new boolean[m][n];
        for (int i=0; i<m; i++){
            for(int j=0; j<n;j++){
                if(picture[i][j] != 0 && !visited[i][j]){
                    dfs(i,j,m,n,picture,visited);
                    numberOfArea++;    
                }
                maxSizeOfOneArea = Math.max(maxSizeOfOneArea,count);
                count = 0;
            }
        }
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        return answer;
    }
    
    public void dfs(int i, int j, int m, int n, int[][] picture, boolean[][] visited){
        if (visited[i][j]) return;
        visited[i][j] = true;
        count ++;
        
        for (int k=0; k<4; k++){
            int newX = i+dx[k], newY = j+dy[k];
            if(0<=newX && newX<m && 0<=newY && newY<n){
                if(picture[i][j] == picture[newX][newY] && !visited[newX][newY]){     
                    dfs(newX,newY,m,n,picture,visited);
                }
            }
        }
    }
}
