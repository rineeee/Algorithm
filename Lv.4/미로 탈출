from heapq import heappush, heappop
INF = float("inf")

def dijkstra(n, graph, src, dst, traps):
    q = []
    visited = [[False for _ in range(1<<len(traps))] for _ in range(n+1)]
    heappush(q, (0,src,0)) # 비용, 시작점, 함정상태
    
    while q:
        w, u, state = heappop(q)
        if u == dst:
            return w
        if visited[u][state]:
            continue
        visited[u][state] = True
        
        currTrapped = False
        trapped = {}
        for i in range(len(traps)):
            bit = 1 << i # 1, 10, 100, 1000 ....
            if state & bit:
                if traps[i] == u:
                    state &= ~bit
                else:
                    trapped[traps[i]] = True
            else:
                 if traps[i] == u:
                    state |= bit
                    trapped[traps[i]] = True
                    currTrapped = True
        for v in range(1, n+1):
            if v == u:
                continue
            nextTrapped = True if v in trapped else False
            if currTrapped == nextTrapped:
                if graph[u][v] != INF:
                    heappush(q,((w+graph[u][v]), v, state))
            else:
                if graph[v][u] != INF:
                    heappush(q,((w+graph[v][u]), v, state))


def solution(n, start, end, roads, traps):
    graph = [[INF for _ in range(n+1)] for _ in range(n+1)]
    for i in range(1, n+1):
        graph[i][i] = 0
    
    for data in roads:
        u, v, w = data[0], data[1], data[2]
        if graph[u][v] > w:
            graph[u][v] = w
            
    return dijkstra(n, graph, start, end, traps)
