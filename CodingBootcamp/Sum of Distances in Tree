class Solution(object):
    def sumOfDistancesInTree(self, n, edges):
        def build():
            for edge in edges:
                adj_list[edge[0]].append(edge[1])
                adj_list[edge[1]].append(edge[0])

        def bfs(node = 0):
            visited = set()
            paths_sum = 0
            queue = deque([node])
            
            path_len = 1
            while queue:
                for _ in range(len(queue)):
                    node = queue.popleft()
                    visited.add(node)
                    for child in adj_list[node]:
                        if child not in visited:
                            paths_sum += path_len
                            queue.append(child)
                path_len += 1

            return paths_sum

        def calc_subtree_sizes(node = 0, parent=None):
            for child in adj_list[node]:
                if child != parent:
                    calc_subtree_sizes(child, node)
                    counts[node] += counts[child]

        def bfs2(node = 0):
            visited = set()
            queue = deque([node])
            
            while queue:
                for _ in range(len(queue)):
                    node = queue.popleft()
                    visited.add(node)
                    for child in adj_list[node]:
                        if child not in visited:
                            res[child] = res[node] - counts[child] + (n - counts[child])
                            queue.append(child)

        adj_list = defaultdict(list)
        build()
        counts = [1] * n
        res = [0] * n
        res[0] = bfs() # dfs()
        calc_subtree_sizes()
        bfs2() # dfs2()
        return res
