def rotate(key):
    return list(zip(*key[::-1]))

def attach(i,j,rotated_key,board,M):
    for x in range(M):
        for y in range(M):
            board[x+i][y+j] += rotated_key[x][y]

def detach(i,j,rotated_key,board,M):
    for x in range(M):
        for y in range(M):
            board[x+i][y+j] -= rotated_key[x][y]
            
def check(board, M, N):
    for i in range(N):
        for j in range(N):
            if board[M+i][M+j] != 1:
                return False;
    return True

def solution(key, lock):
    M, N = len(key), len(lock)
    board = [[0]*(2*M+N) for _ in range(2*M+N)]
    
    for i in range(N):
        for j in range(N):
            board[M+i][M+j] = lock[i][j]
    
    rotated_key = key
    for _ in range(4):
        rotated_key = rotate(rotated_key)
        for i in range(1, M+N):
            for j in range(1, M+N):
                attach(i,j,rotated_key,board,M)
                if check(board,M,N):
                    return True
                detach(i,j,rotated_key,board,M)
    return False
        
    
