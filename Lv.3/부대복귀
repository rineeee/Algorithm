from collections import deque

def bfs(dest, graph, visited):
    que = deque()
    que.append(dest)
    visited[dest] = 0
    
    while que:
        s = que.popleft()
        for node in graph[s]:
            if visited[node] == -1:
                que.append(node)
                visited[node] = visited[s] + 1
    return visited
                
def solution(n, roads, sources, destination):
    answer = []
    graph = [[] for _ in range(n+1)]
    for a, b in roads:
        graph[a].append(b)
        graph[b].append(a)
    
    visited = [-1] * (n+1)
    result = bfs(destination,graph,visited)
    return [result[s] for s in sources]
    
