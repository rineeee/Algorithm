import java.util.*;

class Solution {
    public int solution(int n, int[][] vertex) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : vertex) {
            int v1 = edge[0];
            int v2 = edge[1];
            graph.get(v1).add(v2);
            graph.get(v2).add(v1);
        }
        
        int[] visited = new int[n+1];
        Queue<Integer> q = new LinkedList<>();
        q.add(1);
        visited[1] = 1;
        while (!q.isEmpty()){
            int curr = q.poll();
            for (int next_ : graph.get(curr)){
                if (visited[next_] == 0){
                    visited[next_] = visited[curr] + 1;
                    q.add(next_);
                }
            }
        }
       
        int max_ = 0;
        int answer = 0;
        for (int v : visited){
            if (max_ == v){
                answer += 1;
            }
            if (max_ < v){
                max_ = v;
                answer = 1;
            }
        }
        return answer;
    }
}
