import java.util.*;

class Solution {
    public int solution(int n, int[][] vertex) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : vertex) {
            int v1 = edge[0];
            int v2 = edge[1];
            graph.get(v1).add(v2);
            graph.get(v2).add(v1);
        }

        int[] visited = new int[n + 1];
        visited[1] = 1;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);

        while (!queue.isEmpty()) {
            int tmp = queue.poll();
            for (int i : graph.get(tmp)) {
                if (visited[i] == 0) {
                    visited[i] = visited[tmp] + 1;
                    queue.offer(i);
                }
            }
        }

        int max = 0;
        int count = 0;
        for (int value : visited) {
            if (value > max) {
                max = value;
                count = 1;
            } else if (value == max) {
                count++;
            }
        }

        return count;
    }
}
