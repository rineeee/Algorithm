import java.util.*;

class Solution {
    class Node implements Comparable<Node>{
        int start, end;
        public Node(int start, int end){
            this.start = start;
            this.end = end;
        }
        @Override
        public int compareTo(Node o){
            return this.end - o.end;
        }
    }
    public int solution(int[][] jobs) {
        PriorityQueue<Node> q = new PriorityQueue<>();
        int start = -1, now = 0;
        int answer = 0;
        int num = 0;
        
        while (num < jobs.length){
            for (int i=0; i<jobs.length; i++){
                if (start < jobs[i][0] && jobs[i][0] <= now){
                    q.add(new Node(jobs[i][0], jobs[i][1]));
                }
            }
            if(!q.isEmpty()){
                Node n = q.poll();
                start = now;
                now += n.end;
                answer += now - n.start;
                num += 1;
            }else{
                now += 1;
            }
        }
        return answer/jobs.length;
    }
}
