from collections import deque

def bfs(board, x, y, cost, d):
    n,m = len(board), len(board[0])
    dxy = {0:(-1, 0), 1:(0, 1), 2:(1, 0), 3:(0, -1)}
    visited = [[float('inf')] * m for _ in range(n)]
    
    que = deque()
    que.append((x,y,cost,d))
    visited[0][0] = 0
    
    while que:
        x, y, cost, d = que.popleft()
        for i in range(4):
            dx = x + dxy[i][0]
            dy = y + dxy[i][1]
            if 0<=dx<n and 0<=dy<m and board[dx][dy] == 0:
                tmp_cost = cost
                if i == d:
                    tmp_cost += 100
                else:
                    tmp_cost += 600
                if tmp_cost < visited[dx][dy]:
                    visited[dx][dy] = tmp_cost
                    que.append((dx,dy,tmp_cost,i))
    return visited[-1][-1]
    
def solution(board):
    return min(bfs(board,0,0,0,1), bfs(board,0,0,0,2))
    
    
