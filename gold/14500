import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static int max = Integer.MIN_VALUE;
    static int[][] map;
    static boolean[][] visited;
    static int n,m;
    static int[] dx = { 0, 1, 0, -1 };
    static int[] dy = { 1, 0, -1, 0 };

    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        map = new int[n][m];
        visited = new boolean[n][m];

        for (int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                visited[i][j] = true;
                solve(i,j,map[i][j],1);
                visited[i][j] = false;
            }
        }
        System.out.println(max);
    }
    static void solve(int row, int col, int sum, int count) {
        if (count == 4){
            max = Math.max(max, sum);
            return;
        }
        for (int i=0; i<4; i++){
            int curRow = row + dx[i];
            int curCol = col + dy[i];

            if(curRow < 0 || curRow >= n || curCol < 0 || curCol >= m) {
                continue;
            }
            if(!visited[curRow][curCol]){
                if(count == 2) {
                    visited[curRow][curCol] = true;
                    solve(row, col, sum + map[curRow][curCol], count + 1);
                    visited[curRow][curCol] = false;
                }

                visited[curRow][curCol] = true;
                solve(curRow, curCol, sum + map[curRow][curCol], count + 1);
                visited[curRow][curCol] = false;
            }
        }
    }
}
