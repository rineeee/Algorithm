import sys
input = sys.stdin.readline


def find_empty(board):
    empty_cells = []
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                empty_cells.append((i, j))
    return empty_cells

def is_valid(num, pos, row_set, col_set, square_set):
    row, col = pos
    if num in row_set[row] or num in col_set[col] or num in square_set[row // 3 * 3 + col // 3]:
        return False
    return True

def solve_sudoku(board, empty_cells, row_set, col_set, square_set):
    if not empty_cells:
        return True

    row, col = empty_cells[0]
    for num in range(1, 10):
        if is_valid(num, (row, col), row_set, col_set, square_set):
            board[row][col] = num
            row_set[row].add(num)
            col_set[col].add(num)
            square_set[row // 3 * 3 + col // 3].add(num)
            if solve_sudoku(board, empty_cells[1:], row_set, col_set, square_set):
                return True
            board[row][col] = 0
            row_set[row].remove(num)
            col_set[col].remove(num)
            square_set[row // 3 * 3 + col // 3].remove(num)

    return False

def initialize_sets(board):
    row_set = [set() for _ in range(9)]
    col_set = [set() for _ in range(9)]
    square_set = [set() for _ in range(9)]

    for i in range(9):
        for j in range(9):
            if board[i][j] != 0:
                row_set[i].add(board[i][j])
                col_set[j].add(board[i][j])
                square_set[i // 3 * 3 + j // 3].add(board[i][j])

    return row_set, col_set, square_set

def solve_sudoku_optimized(board):
    empty_cells = find_empty(board)
    row_set, col_set, square_set = initialize_sets(board)

    solve_sudoku(board, empty_cells, row_set, col_set, square_set)


boards = [list(map(int, input().rstrip())) for _ in range(9)]
solve_sudoku_optimized(boards)
for row in boards:
    print(''.join(map(str,row)))
