import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static int[][] map;
    static int n,k,l;
    static HashMap<Integer, String> hm = new HashMap<>();
    static int[] dx = { 0, 1, 0, -1 };
    static int[] dy = { 1, 0, -1, 0 };
    static List<int[]> snake;

    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        n = Integer.parseInt(br.readLine());
        k = Integer.parseInt(br.readLine());
        map = new int[n][n];
        for (int i=0; i<k; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            map[x-1][y-1] = 1;
        }
        l = Integer.parseInt(br.readLine());
        for (int i=0; i<l; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            String c = st.nextToken();
            hm.put(x,c);
        }
        solve();
    }
    public static void solve(){
        int time = 0;
        int cx = 0, cy = 0;
        int d = 0;

        snake = new ArrayList<>();
        snake.add(new int[]{0,0});

        while (true){
            time ++;
            int nx = cx + dx[d];
            int ny = cy + dy[d];

            if (isFinish(nx,ny)){
                break;
            }

            if (map[nx][ny] == 1){
                map[nx][ny] = 0;
                snake.add(new int[] {nx,ny});
            }else{
                snake.add(new int[]{nx,ny});
                snake.remove(0);
            }

            if (hm.containsKey(time)){
                if (hm.get(time).equals("D")){
                    d+=1;
                    if (d==4){
                        d=0;
                    }
                }else{
                    d-=1;
                    if (d == -1){
                        d=3;
                    }
                }
            }

            cx = nx;
            cy = ny;
        }
        System.out.println(time);
    }

    public static boolean isFinish(int x, int y){
        if (x<0 || x>=n || y<0 || y>=n){
            return true;
        }
        for (int i =0; i<snake.size(); i++){
            int[] tmp = snake.get(i);
            if (x == tmp[0] && y == tmp[1]){
                return true;
            }
        }
        return false;
    }
}
